{"ast":null,"code":"import _classCallCheck from \"/Users/nikeshpatel/Documents/Brigit_Coding_Test/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nikeshpatel/Documents/Brigit_Coding_Test/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nikeshpatel/Documents/Brigit_Coding_Test/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nikeshpatel/Documents/Brigit_Coding_Test/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nikeshpatel/Documents/Brigit_Coding_Test/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nikeshpatel/Documents/Brigit_Coding_Test/my-app/src/Board.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  function Board() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Board)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      boardData: _this.initBoardData(_this.props.height, _this.props.width, _this.props.mines),\n      gameStatus: \"Game in progress\",\n      mineCount: _this.props.mines\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"getMines\",\n\n    /* Helper Functions */\n    // get mines\n    value: function getMines(data) {\n      var mineArray = [];\n      data.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          if (dataitem.isMine) {\n            mineArray.push(dataitem);\n          }\n        });\n      });\n      return mineArray;\n    } // get Flags\n\n  }, {\n    key: \"getFlags\",\n    value: function getFlags(data) {\n      var mineArray = [];\n      data.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          if (dataitem.isFlagged) {\n            mineArray.push(dataitem);\n          }\n        });\n      });\n      return mineArray;\n    } // get Hidden cells\n\n  }, {\n    key: \"getHidden\",\n    value: function getHidden(data) {\n      var mineArray = [];\n      data.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          if (!dataitem.isRevealed) {\n            mineArray.push(dataitem);\n          }\n        });\n      });\n      return mineArray;\n    } // get random number given a dimension\n\n  }, {\n    key: \"getRandomNumber\",\n    value: function getRandomNumber(dimension) {\n      // return Math.floor(Math.random() * dimension);\n      return Math.floor(Math.random() * 1000 + 1) % dimension;\n    } // Gets initial board data\n\n  }, {\n    key: \"initBoardData\",\n    value: function initBoardData(height, width, mines) {\n      var data = this.createEmptyArray(height, width);\n      data = this.plantMines(data, height, width, mines);\n      data = this.getNeighbours(data, height, width);\n      return data;\n    }\n  }, {\n    key: \"createEmptyArray\",\n    value: function createEmptyArray(height, width) {\n      var data = [];\n\n      for (var i = 0; i < height; i++) {\n        data.push([]);\n\n        for (var j = 0; j < width; j++) {\n          data[i][j] = {\n            x: i,\n            y: j,\n            isMine: false,\n            neighbour: 0,\n            isRevealed: false,\n            isEmpty: false,\n            isFlagged: false\n          };\n        }\n      }\n\n      return data;\n    } // plant mines on the board\n\n  }, {\n    key: \"plantMines\",\n    value: function plantMines(data, height, width, mines) {\n      var randomx,\n          randomy,\n          minesPlanted = 0;\n\n      while (minesPlanted < mines) {\n        randomx = this.getRandomNumber(width);\n        randomy = this.getRandomNumber(height);\n\n        if (!data[randomx][randomy].isMine) {\n          data[randomx][randomy].isMine = true;\n          minesPlanted++;\n        }\n      }\n\n      return data;\n    } // get number of neighbouring mines for each board cell\n\n  }, {\n    key: \"getNeighbours\",\n    value: function getNeighbours(data, height, width) {\n      var _this2 = this;\n\n      var updatedData = data,\n          index = 0;\n\n      for (var i = 0; i < height; i++) {\n        for (var j = 0; j < width; j++) {\n          if (data[i][j].isMine !== true) {\n            (function () {\n              var mine = 0;\n\n              var area = _this2.traverseBoard(data[i][j].x, data[i][j].y, data);\n\n              area.map(function (value) {\n                if (value.isMine) {\n                  mine++;\n                }\n              });\n\n              if (mine === 0) {\n                updatedData[i][j].isEmpty = true;\n              }\n\n              updatedData[i][j].neighbour = mine;\n            })();\n          }\n        }\n      }\n\n      return updatedData;\n    }\n  }, {\n    key: \"traverseBoard\",\n    // looks for neighbouring cells and returns them\n    value: function traverseBoard(x, y, data) {\n      var el = []; //up\n\n      if (x > 0) {\n        el.push(data[x - 1][y]);\n      } //down\n\n\n      if (x < this.props.height - 1) {\n        el.push(data[x + 1][y]);\n      } //left\n\n\n      if (y > 0) {\n        el.push(data[x][y - 1]);\n      } //right\n\n\n      if (y < this.props.width - 1) {\n        el.push(data[x][y + 1]);\n      } // top left\n\n\n      if (x > 0 && y > 0) {\n        el.push(data[x - 1][y - 1]);\n      } // top right\n\n\n      if (x > 0 && y < this.props.width - 1) {\n        el.push(data[x - 1][y + 1]);\n      } // bottom right\n\n\n      if (x < this.props.height - 1 && y < this.props.width - 1) {\n        el.push(data[x + 1][y + 1]);\n      } // bottom left\n\n\n      if (x < this.props.height - 1 && y > 0) {\n        el.push(data[x + 1][y - 1]);\n      }\n\n      return el;\n    } // reveals the whole board\n\n  }, {\n    key: \"revealBoard\",\n    value: function revealBoard() {\n      var updatedData = this.state.boardData;\n      updatedData.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          dataitem.isRevealed = true;\n        });\n      });\n      this.setState({\n        boardData: updatedData\n      });\n    }\n    /* reveal logic for empty cell */\n\n  }, {\n    key: \"revealEmpty\",\n    value: function revealEmpty(x, y, data) {\n      var _this3 = this;\n\n      var area = this.traverseBoard(x, y, data);\n      area.map(function (value) {\n        if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n          data[value.x][value.y].isRevealed = true;\n\n          if (value.isEmpty) {\n            _this3.revealEmpty(value.x, value.y, data);\n          }\n        }\n      });\n      return data;\n    } // Handle User Events\n\n  }, {\n    key: \"handleCellClick\",\n    value: function handleCellClick(x, y) {\n      // check if revealed. return if true.\n      if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null; // check if mine. game over if true\n\n      if (this.state.boardData[x][y].isMine) {\n        this.setState({\n          gameStatus: \"You Lost.\"\n        });\n        this.revealBoard();\n        alert(\"game over\");\n      }\n\n      var updatedData = this.state.boardData;\n      updatedData[x][y].isFlagged = false;\n      updatedData[x][y].isRevealed = true;\n\n      if (updatedData[x][y].isEmpty) {\n        updatedData = this.revealEmpty(x, y, updatedData);\n      }\n\n      if (this.getHidden(updatedData).length === this.props.mines) {\n        this.setState({\n          mineCount: 0,\n          gameStatus: \"You Win.\"\n        });\n        this.revealBoard();\n        alert(\"You Win\");\n      }\n\n      this.setState({\n        boardData: updatedData,\n        mineCount: this.props.mines - this.getFlags(updatedData).length\n      });\n    }\n  }, {\n    key: \"handleContextMenu\",\n    value: function handleContextMenu(e, x, y) {\n      e.preventDefault();\n      var updatedData = this.state.boardData;\n      var mines = this.state.mineCount; // check if already revealed\n\n      if (updatedData[x][y].isRevealed) return;\n\n      if (updatedData[x][y].isFlagged) {\n        updatedData[x][y].isFlagged = false;\n        mines++;\n      } else {\n        updatedData[x][y].isFlagged = true;\n        mines--;\n      }\n\n      if (mines === 0) {\n        var mineArray = this.getMines(updatedData);\n        var FlagArray = this.getFlags(updatedData);\n\n        if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n          this.setState({\n            mineCount: 0,\n            gameStatus: \"You Win.\"\n          });\n          this.revealBoard();\n          alert(\"You Win\");\n        }\n      }\n\n      this.setState({\n        boardData: updatedData,\n        mineCount: mines\n      });\n    }\n  }, {\n    key: \"renderBoard\",\n    value: function renderBoard(data) {\n      var _this4 = this;\n\n      return data.map(function (datarow) {\n        return datarow.map(function (dataitem) {\n          return React.createElement(\"div\", {\n            key: dataitem.x * datarow.length + dataitem.y,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279\n            },\n            __self: this\n          }, React.createElement(Cell, {\n            onClick: function onClick() {\n              return _this4.handleCellClick(dataitem.x, dataitem.y);\n            },\n            cMenu: function cMenu(e) {\n              return _this4.handleContextMenu(e, dataitem.x, dataitem.y);\n            },\n            value: dataitem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280\n            },\n            __self: this\n          }), datarow[datarow.length - 1] === dataitem ? React.createElement(\"div\", {\n            className: \"clear\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }) : \"\");\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, \"Mines remaining: \", this.state.mineCount), React.createElement(\"h1\", {\n        className: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, this.state.gameStatus)), this.renderBoard(this.state.boardData));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nexport { Board as default };\nBoard.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  mines: PropTypes.number\n};","map":{"version":3,"sources":["/Users/nikeshpatel/Documents/Brigit_Coding_Test/my-app/src/Board.js"],"names":["React","PropTypes","Cell","Board","state","boardData","initBoardData","props","height","width","mines","gameStatus","mineCount","data","mineArray","map","datarow","dataitem","isMine","push","isFlagged","isRevealed","dimension","Math","floor","random","createEmptyArray","plantMines","getNeighbours","i","j","x","y","neighbour","isEmpty","randomx","randomy","minesPlanted","getRandomNumber","updatedData","index","mine","area","traverseBoard","value","el","setState","revealEmpty","revealBoard","alert","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","handleCellClick","handleContextMenu","renderBoard","Component","propTypes","number"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAEqBC,K;;;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,MAAKC,aAAL,CAAmB,MAAKC,KAAL,CAAWC,MAA9B,EAAsC,MAAKD,KAAL,CAAWE,KAAjD,EAAwD,MAAKF,KAAL,CAAWG,KAAnE,CADL;AAENC,MAAAA,UAAU,EAAE,kBAFN;AAGNC,MAAAA,SAAS,EAAE,MAAKL,KAAL,CAAWG;AAHhB,K;;;;;;;AAMR;AAEA;6BACSG,I,EAAM;AACb,UAAIC,SAAS,GAAG,EAAhB;AAEAD,MAAAA,IAAI,CAACE,GAAL,CAAS,UAAAC,OAAO,EAAI;AAClBA,QAAAA,OAAO,CAACD,GAAR,CAAY,UAACE,QAAD,EAAc;AACxB,cAAIA,QAAQ,CAACC,MAAb,EAAqB;AACnBJ,YAAAA,SAAS,CAACK,IAAV,CAAeF,QAAf;AACD;AACF,SAJD;AAKD,OAND;AAQA,aAAOH,SAAP;AACD,K,CAED;;;;6BACSD,I,EAAM;AACb,UAAIC,SAAS,GAAG,EAAhB;AAEAD,MAAAA,IAAI,CAACE,GAAL,CAAS,UAAAC,OAAO,EAAI;AAClBA,QAAAA,OAAO,CAACD,GAAR,CAAY,UAACE,QAAD,EAAc;AACxB,cAAIA,QAAQ,CAACG,SAAb,EAAwB;AACtBN,YAAAA,SAAS,CAACK,IAAV,CAAeF,QAAf;AACD;AACF,SAJD;AAKD,OAND;AAQA,aAAOH,SAAP;AACD,K,CAED;;;;8BACUD,I,EAAM;AACd,UAAIC,SAAS,GAAG,EAAhB;AAEAD,MAAAA,IAAI,CAACE,GAAL,CAAS,UAAAC,OAAO,EAAI;AAClBA,QAAAA,OAAO,CAACD,GAAR,CAAY,UAACE,QAAD,EAAc;AACxB,cAAI,CAACA,QAAQ,CAACI,UAAd,EAA0B;AACxBP,YAAAA,SAAS,CAACK,IAAV,CAAeF,QAAf;AACD;AACF,SAJD;AAKD,OAND;AAQA,aAAOH,SAAP;AACD,K,CAED;;;;oCACgBQ,S,EAAW;AACzB;AACA,aAAOC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,IAAjB,GAAyB,CAApC,IAAyCH,SAAhD;AACD,K,CAED;;;;kCACcd,M,EAAQC,K,EAAOC,K,EAAO;AAClC,UAAIG,IAAI,GAAG,KAAKa,gBAAL,CAAsBlB,MAAtB,EAA8BC,KAA9B,CAAX;AACAI,MAAAA,IAAI,GAAG,KAAKc,UAAL,CAAgBd,IAAhB,EAAsBL,MAAtB,EAA8BC,KAA9B,EAAqCC,KAArC,CAAP;AACAG,MAAAA,IAAI,GAAG,KAAKe,aAAL,CAAmBf,IAAnB,EAAyBL,MAAzB,EAAiCC,KAAjC,CAAP;AACA,aAAOI,IAAP;AACD;;;qCAEgBL,M,EAAQC,K,EAAO;AAC9B,UAAII,IAAI,GAAG,EAAX;;AAEA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,MAApB,EAA4BqB,CAAC,EAA7B,EAAiC;AAC/BhB,QAAAA,IAAI,CAACM,IAAL,CAAU,EAAV;;AACA,aAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAApB,EAA2BqB,CAAC,EAA5B,EAAgC;AAC9BjB,UAAAA,IAAI,CAACgB,CAAD,CAAJ,CAAQC,CAAR,IAAa;AACXC,YAAAA,CAAC,EAAEF,CADQ;AAEXG,YAAAA,CAAC,EAAEF,CAFQ;AAGXZ,YAAAA,MAAM,EAAE,KAHG;AAIXe,YAAAA,SAAS,EAAE,CAJA;AAKXZ,YAAAA,UAAU,EAAE,KALD;AAMXa,YAAAA,OAAO,EAAE,KANE;AAOXd,YAAAA,SAAS,EAAE;AAPA,WAAb;AASD;AACF;;AACD,aAAOP,IAAP;AACD,K,CAED;;;;+BACWA,I,EAAML,M,EAAQC,K,EAAOC,K,EAAO;AACrC,UAAIyB,OAAJ;AAAA,UAAaC,OAAb;AAAA,UAAsBC,YAAY,GAAG,CAArC;;AAEA,aAAOA,YAAY,GAAG3B,KAAtB,EAA6B;AAC3ByB,QAAAA,OAAO,GAAG,KAAKG,eAAL,CAAqB7B,KAArB,CAAV;AACA2B,QAAAA,OAAO,GAAG,KAAKE,eAAL,CAAqB9B,MAArB,CAAV;;AACA,YAAI,CAAEK,IAAI,CAACsB,OAAD,CAAJ,CAAcC,OAAd,EAAuBlB,MAA7B,EAAsC;AACpCL,UAAAA,IAAI,CAACsB,OAAD,CAAJ,CAAcC,OAAd,EAAuBlB,MAAvB,GAAgC,IAAhC;AACAmB,UAAAA,YAAY;AACb;AACF;;AAED,aAAQxB,IAAR;AACD,K,CAED;;;;kCACcA,I,EAAML,M,EAAQC,K,EAAO;AAAA;;AACjC,UAAI8B,WAAW,GAAG1B,IAAlB;AAAA,UAAwB2B,KAAK,GAAG,CAAhC;;AAEA,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,MAApB,EAA4BqB,CAAC,EAA7B,EAAiC;AAC/B,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAApB,EAA2BqB,CAAC,EAA5B,EAAgC;AAC9B,cAAIjB,IAAI,CAACgB,CAAD,CAAJ,CAAQC,CAAR,EAAWZ,MAAX,KAAsB,IAA1B,EAAgC;AAAA;AAC9B,kBAAIuB,IAAI,GAAG,CAAX;;AACA,kBAAMC,IAAI,GAAG,MAAI,CAACC,aAAL,CAAmB9B,IAAI,CAACgB,CAAD,CAAJ,CAAQC,CAAR,EAAWC,CAA9B,EAAiClB,IAAI,CAACgB,CAAD,CAAJ,CAAQC,CAAR,EAAWE,CAA5C,EAA+CnB,IAA/C,CAAb;;AACA6B,cAAAA,IAAI,CAAC3B,GAAL,CAAS,UAAA6B,KAAK,EAAI;AAChB,oBAAIA,KAAK,CAAC1B,MAAV,EAAkB;AAChBuB,kBAAAA,IAAI;AACL;AACF,eAJD;;AAKA,kBAAIA,IAAI,KAAK,CAAb,EAAgB;AACdF,gBAAAA,WAAW,CAACV,CAAD,CAAX,CAAeC,CAAf,EAAkBI,OAAlB,GAA4B,IAA5B;AACD;;AACDK,cAAAA,WAAW,CAACV,CAAD,CAAX,CAAeC,CAAf,EAAkBG,SAAlB,GAA8BQ,IAA9B;AAX8B;AAY/B;AACF;AACF;;AAED,aAAQF,WAAR;AACD;;;AAED;kCACcR,C,EAAGC,C,EAAGnB,I,EAAM;AACxB,UAAMgC,EAAE,GAAG,EAAX,CADwB,CAGxB;;AACA,UAAId,CAAC,GAAG,CAAR,EAAW;AACTc,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CAAR;AACD,OANuB,CAQxB;;;AACA,UAAID,CAAC,GAAG,KAAKxB,KAAL,CAAWC,MAAX,GAAoB,CAA5B,EAA+B;AAC7BqC,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CAAR;AACD,OAXuB,CAaxB;;;AACA,UAAIA,CAAC,GAAG,CAAR,EAAW;AACTa,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAAR;AACD,OAhBuB,CAkBxB;;;AACA,UAAIA,CAAC,GAAG,KAAKzB,KAAL,CAAWE,KAAX,GAAmB,CAA3B,EAA8B;AAC5BoC,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAAR;AACD,OArBuB,CAuBxB;;;AACA,UAAID,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,CAAjB,EAAoB;AAClBa,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAAR;AACD,OA1BuB,CA4BxB;;;AACA,UAAID,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,KAAKzB,KAAL,CAAWE,KAAX,GAAmB,CAApC,EAAuC;AACrCoC,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAAR;AACD,OA/BuB,CAiCxB;;;AACA,UAAID,CAAC,GAAG,KAAKxB,KAAL,CAAWC,MAAX,GAAoB,CAAxB,IAA6BwB,CAAC,GAAG,KAAKzB,KAAL,CAAWE,KAAX,GAAmB,CAAxD,EAA2D;AACzDoC,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAAR;AACD,OApCuB,CAsCxB;;;AACA,UAAID,CAAC,GAAG,KAAKxB,KAAL,CAAWC,MAAX,GAAoB,CAAxB,IAA6BwB,CAAC,GAAG,CAArC,EAAwC;AACtCa,QAAAA,EAAE,CAAC1B,IAAH,CAAQN,IAAI,CAACkB,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAAR;AACD;;AAED,aAAOa,EAAP;AACD,K,CAED;;;;kCACc;AACZ,UAAIN,WAAW,GAAG,KAAKnC,KAAL,CAAWC,SAA7B;AACAkC,MAAAA,WAAW,CAACxB,GAAZ,CAAgB,UAACC,OAAD,EAAa;AAC3BA,QAAAA,OAAO,CAACD,GAAR,CAAY,UAACE,QAAD,EAAc;AACxBA,UAAAA,QAAQ,CAACI,UAAT,GAAsB,IAAtB;AACD,SAFD;AAGD,OAJD;AAKA,WAAKyB,QAAL,CAAc;AACZzC,QAAAA,SAAS,EAAEkC;AADC,OAAd;AAGD;AAED;;;;gCACYR,C,EAAGC,C,EAAGnB,I,EAAM;AAAA;;AACtB,UAAI6B,IAAI,GAAG,KAAKC,aAAL,CAAmBZ,CAAnB,EAAsBC,CAAtB,EAAyBnB,IAAzB,CAAX;AACA6B,MAAAA,IAAI,CAAC3B,GAAL,CAAS,UAAA6B,KAAK,EAAI;AAChB,YAAI,CAACA,KAAK,CAACxB,SAAP,IAAoB,CAACwB,KAAK,CAACvB,UAA3B,KAA0CuB,KAAK,CAACV,OAAN,IAAiB,CAACU,KAAK,CAAC1B,MAAlE,CAAJ,EAA+E;AAC7EL,UAAAA,IAAI,CAAC+B,KAAK,CAACb,CAAP,CAAJ,CAAca,KAAK,CAACZ,CAApB,EAAuBX,UAAvB,GAAoC,IAApC;;AACA,cAAIuB,KAAK,CAACV,OAAV,EAAmB;AACjB,YAAA,MAAI,CAACa,WAAL,CAAiBH,KAAK,CAACb,CAAvB,EAA0Ba,KAAK,CAACZ,CAAhC,EAAmCnB,IAAnC;AACD;AACF;AACF,OAPD;AAQA,aAAOA,IAAP;AAED,K,CAED;;;;oCAEgBkB,C,EAAGC,C,EAAG;AAEpB;AACA,UAAI,KAAK5B,KAAL,CAAWC,SAAX,CAAqB0B,CAArB,EAAwBC,CAAxB,EAA2BX,UAA3B,IAAyC,KAAKjB,KAAL,CAAWC,SAAX,CAAqB0B,CAArB,EAAwBC,CAAxB,EAA2BZ,SAAxE,EAAmF,OAAO,IAAP,CAH/D,CAKpB;;AACA,UAAI,KAAKhB,KAAL,CAAWC,SAAX,CAAqB0B,CAArB,EAAwBC,CAAxB,EAA2Bd,MAA/B,EAAuC;AACrC,aAAK4B,QAAL,CAAc;AAAEnC,UAAAA,UAAU,EAAE;AAAd,SAAd;AACA,aAAKqC,WAAL;AACAC,QAAAA,KAAK,CAAC,WAAD,CAAL;AACD;;AAED,UAAIV,WAAW,GAAG,KAAKnC,KAAL,CAAWC,SAA7B;AACAkC,MAAAA,WAAW,CAACR,CAAD,CAAX,CAAeC,CAAf,EAAkBZ,SAAlB,GAA8B,KAA9B;AACAmB,MAAAA,WAAW,CAACR,CAAD,CAAX,CAAeC,CAAf,EAAkBX,UAAlB,GAA+B,IAA/B;;AAEA,UAAIkB,WAAW,CAACR,CAAD,CAAX,CAAeC,CAAf,EAAkBE,OAAtB,EAA+B;AAC7BK,QAAAA,WAAW,GAAG,KAAKQ,WAAL,CAAiBhB,CAAjB,EAAoBC,CAApB,EAAuBO,WAAvB,CAAd;AACD;;AAED,UAAI,KAAKW,SAAL,CAAeX,WAAf,EAA4BY,MAA5B,KAAuC,KAAK5C,KAAL,CAAWG,KAAtD,EAA6D;AAC3D,aAAKoC,QAAL,CAAc;AAAElC,UAAAA,SAAS,EAAE,CAAb;AAAgBD,UAAAA,UAAU,EAAE;AAA5B,SAAd;AACA,aAAKqC,WAAL;AACAC,QAAAA,KAAK,CAAC,SAAD,CAAL;AACD;;AAED,WAAKH,QAAL,CAAc;AACZzC,QAAAA,SAAS,EAAEkC,WADC;AAEZ3B,QAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWG,KAAX,GAAmB,KAAK0C,QAAL,CAAcb,WAAd,EAA2BY;AAF7C,OAAd;AAID;;;sCAEiBE,C,EAAGtB,C,EAAGC,C,EAAG;AACzBqB,MAAAA,CAAC,CAACC,cAAF;AACA,UAAIf,WAAW,GAAG,KAAKnC,KAAL,CAAWC,SAA7B;AACA,UAAIK,KAAK,GAAG,KAAKN,KAAL,CAAWQ,SAAvB,CAHyB,CAKzB;;AACA,UAAI2B,WAAW,CAACR,CAAD,CAAX,CAAeC,CAAf,EAAkBX,UAAtB,EAAkC;;AAElC,UAAIkB,WAAW,CAACR,CAAD,CAAX,CAAeC,CAAf,EAAkBZ,SAAtB,EAAiC;AAC/BmB,QAAAA,WAAW,CAACR,CAAD,CAAX,CAAeC,CAAf,EAAkBZ,SAAlB,GAA8B,KAA9B;AACAV,QAAAA,KAAK;AACN,OAHD,MAGO;AACL6B,QAAAA,WAAW,CAACR,CAAD,CAAX,CAAeC,CAAf,EAAkBZ,SAAlB,GAA8B,IAA9B;AACAV,QAAAA,KAAK;AACN;;AAED,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,YAAMI,SAAS,GAAG,KAAKyC,QAAL,CAAchB,WAAd,CAAlB;AACA,YAAMiB,SAAS,GAAG,KAAKJ,QAAL,CAAcb,WAAd,CAAlB;;AACA,YAAIkB,IAAI,CAACC,SAAL,CAAe5C,SAAf,MAA8B2C,IAAI,CAACC,SAAL,CAAeF,SAAf,CAAlC,EAA6D;AAC3D,eAAKV,QAAL,CAAc;AAAElC,YAAAA,SAAS,EAAE,CAAb;AAAgBD,YAAAA,UAAU,EAAE;AAA5B,WAAd;AACA,eAAKqC,WAAL;AACAC,UAAAA,KAAK,CAAC,SAAD,CAAL;AACD;AACF;;AAED,WAAKH,QAAL,CAAc;AACZzC,QAAAA,SAAS,EAAEkC,WADC;AAEZ3B,QAAAA,SAAS,EAAEF;AAFC,OAAd;AAID;;;gCAEWG,I,EAAM;AAAA;;AAChB,aAAOA,IAAI,CAACE,GAAL,CAAS,UAACC,OAAD,EAAa;AAC3B,eAAOA,OAAO,CAACD,GAAR,CAAY,UAACE,QAAD,EAAc;AAC/B,iBACE;AAAK,YAAA,GAAG,EAAEA,QAAQ,CAACc,CAAT,GAAaf,OAAO,CAACmC,MAArB,GAA8BlC,QAAQ,CAACe,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AACE,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAAC2B,eAAL,CAAqB1C,QAAQ,CAACc,CAA9B,EAAiCd,QAAQ,CAACe,CAA1C,CAAN;AAAA,aADX;AAEE,YAAA,KAAK,EAAE,eAACqB,CAAD;AAAA,qBAAO,MAAI,CAACO,iBAAL,CAAuBP,CAAvB,EAA0BpC,QAAQ,CAACc,CAAnC,EAAsCd,QAAQ,CAACe,CAA/C,CAAP;AAAA,aAFT;AAGE,YAAA,KAAK,EAAEf,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAMID,OAAO,CAACA,OAAO,CAACmC,MAAR,GAAiB,CAAlB,CAAP,KAAgClC,QAAjC,GAA6C;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA7C,GAAyE,EAN5E,CADF;AASD,SAVM,CAAP;AAWD,OAZM,CAAP;AAcD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAyC,KAAKb,KAAL,CAAWQ,SAApD,CADF,EAEE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsB,KAAKR,KAAL,CAAWO,UAAjC,CAFF,CADF,EAMI,KAAKkD,WAAL,CAAiB,KAAKzD,KAAL,CAAWC,SAA5B,CANJ,CADF;AAWD;;;;EA3SgCL,KAAK,CAAC8D,S;;SAApB3D,K;AA8SrBA,KAAK,CAAC4D,SAAN,GAAkB;AAChBvD,EAAAA,MAAM,EAAEP,SAAS,CAAC+D,MADF;AAEhBvD,EAAAA,KAAK,EAAER,SAAS,CAAC+D,MAFD;AAGhBtD,EAAAA,KAAK,EAAET,SAAS,CAAC+D;AAHD,CAAlB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\n\nexport default class Board extends React.Component {\n  state = {\n    boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n    gameStatus: \"Game in progress\",\n    mineCount: this.props.mines,\n  };\n\n  /* Helper Functions */\n\n  // get mines\n  getMines(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isMine) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Flags\n  getFlags(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isFlagged) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Hidden cells\n  getHidden(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (!dataitem.isRevealed) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get random number given a dimension\n  getRandomNumber(dimension) {\n    // return Math.floor(Math.random() * dimension);\n    return Math.floor((Math.random() * 1000) + 1) % dimension;\n  }\n\n  // Gets initial board data\n  initBoardData(height, width, mines) {\n    let data = this.createEmptyArray(height, width);\n    data = this.plantMines(data, height, width, mines);\n    data = this.getNeighbours(data, height, width);\n    return data;\n  }\n\n  createEmptyArray(height, width) {\n    let data = [];\n\n    for (let i = 0; i < height; i++) {\n      data.push([]);\n      for (let j = 0; j < width; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          isMine: false,\n          neighbour: 0,\n          isRevealed: false,\n          isEmpty: false,\n          isFlagged: false,\n        };\n      }\n    }\n    return data;\n  }\n\n  // plant mines on the board\n  plantMines(data, height, width, mines) {\n    let randomx, randomy, minesPlanted = 0;\n\n    while (minesPlanted < mines) {\n      randomx = this.getRandomNumber(width);\n      randomy = this.getRandomNumber(height);\n      if (!(data[randomx][randomy].isMine)) {\n        data[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n\n    return (data);\n  }\n\n  // get number of neighbouring mines for each board cell\n  getNeighbours(data, height, width) {\n    let updatedData = data, index = 0;\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (data[i][j].isMine !== true) {\n          let mine = 0;\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n          area.map(value => {\n            if (value.isMine) {\n              mine++;\n            }\n          });\n          if (mine === 0) {\n            updatedData[i][j].isEmpty = true;\n          }\n          updatedData[i][j].neighbour = mine;\n        }\n      }\n    }\n\n    return (updatedData);\n  };\n\n  // looks for neighbouring cells and returns them\n  traverseBoard(x, y, data) {\n    const el = [];\n\n    //up\n    if (x > 0) {\n      el.push(data[x - 1][y]);\n    }\n\n    //down\n    if (x < this.props.height - 1) {\n      el.push(data[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n      el.push(data[x][y - 1]);\n    }\n\n    //right\n    if (y < this.props.width - 1) {\n      el.push(data[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n      el.push(data[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(data[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(data[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(data[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n\n  // reveals the whole board\n  revealBoard() {\n    let updatedData = this.state.boardData;\n    updatedData.map((datarow) => {\n      datarow.map((dataitem) => {\n        dataitem.isRevealed = true;\n      });\n    });\n    this.setState({\n      boardData: updatedData\n    })\n  }\n\n  /* reveal logic for empty cell */\n  revealEmpty(x, y, data) {\n    let area = this.traverseBoard(x, y, data);\n    area.map(value => {\n      if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n        data[value.x][value.y].isRevealed = true;\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, data);\n        }\n      }\n    });\n    return data;\n\n  }\n\n  // Handle User Events\n\n  handleCellClick(x, y) {\n\n    // check if revealed. return if true.\n    if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n\n    // check if mine. game over if true\n    if (this.state.boardData[x][y].isMine) {\n      this.setState({ gameStatus: \"You Lost.\" });\n      this.revealBoard();\n      alert(\"game over\");\n    }\n\n    let updatedData = this.state.boardData;\n    updatedData[x][y].isFlagged = false;\n    updatedData[x][y].isRevealed = true;\n\n    if (updatedData[x][y].isEmpty) {\n      updatedData = this.revealEmpty(x, y, updatedData);\n    }\n\n    if (this.getHidden(updatedData).length === this.props.mines) {\n      this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n      this.revealBoard();\n      alert(\"You Win\");\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: this.props.mines - this.getFlags(updatedData).length,\n    });\n  }\n\n  handleContextMenu(e, x, y) {\n    e.preventDefault();\n    let updatedData = this.state.boardData;\n    let mines = this.state.mineCount;\n\n    // check if already revealed\n    if (updatedData[x][y].isRevealed) return;\n\n    if (updatedData[x][y].isFlagged) {\n      updatedData[x][y].isFlagged = false;\n      mines++;\n    } else {\n      updatedData[x][y].isFlagged = true;\n      mines--;\n    }\n\n    if (mines === 0) {\n      const mineArray = this.getMines(updatedData);\n      const FlagArray = this.getFlags(updatedData);\n      if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n        this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n        this.revealBoard();\n        alert(\"You Win\");\n      }\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: mines,\n    });\n  }\n\n  renderBoard(data) {\n    return data.map((datarow) => {\n      return datarow.map((dataitem) => {\n        return (\n          <div key={dataitem.x * datarow.length + dataitem.y}>\n            <Cell\n              onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\n              cMenu={(e) => this.handleContextMenu(e, dataitem.x, dataitem.y)}\n              value={dataitem}\n            />\n            {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n          </div>);\n      })\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div className=\"game-info\">\n          <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n          <h1 className=\"info\">{this.state.gameStatus}</h1>\n        </div>\n        {\n          this.renderBoard(this.state.boardData)\n        }\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  mines: PropTypes.number,\n}\n"]},"metadata":{},"sourceType":"module"}